@page "/hotel/room-details/{Id:int}"
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IHotelRoomService hotelService
@inject IStripePaymentService stripePayment
@inject IRoomOrderDetailsService roomOrderService

@*//TODO: add if statement to check if HotelBooking is populated*@
@if(HotelBooking?.OrderDetails?.HotelRoomDto?.HotelRoomImages == null)
{
    <div class="spinner"></div>
}
else
{
<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
    <div class="row p-2 my-3" style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
            <div class="row px-2 text-success border-bottom">
                <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Room</p></div>
                <div class="col-4 p-0"><a href="hotel/rooms" class="btn btn-secondary btn-block">Back to Rooms</a></div>
            </div>

            <div class="row">
                <div class="col-6">
                    <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                            <ol class="carousel-indicators">
                                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                            </ol>
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100" src="images/slide1.jpg" alt="First slide">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <span class="float-right pt-4">
                        <span class="float-right">Max Occupancy: @HotelBooking.OrderDetails.HotelRoomDto.Occupancy adults</span><br />
                        <span class="float-right pt-1">Villa Size: @HotelBooking.OrderDetails.HotelRoomDto.SqFt sqft</span><br />
                        <h4 class="text-warning font-weight-bold pt-5">USD 
                            <span style="border-bottom:1px solid #ff6a00">
                                @HotelBooking.OrderDetails.HotelRoomDto.TotalAmount.ToString("#,#.00#;(#,#.00#)");
                            </span>
                        </h4>
                        <span class="float-right">Cost for @HotelBooking.OrderDetails.HotelRoomDto.TotalDays nights</span>
                    </span>
                </div>
            </div>
            <div class="row p-2">
                <div class="col-12">
                    <p class="card-title text-warning" style="font-size:xx-large">@HotelBooking.OrderDetails.HotelRoomDto.Name</p>
                    <p class="card-text" style="font-size:large">
                       @((MarkupString)@HotelBooking.OrderDetails.HotelRoomDto.Details)
                    </p>
                </div>
            </div>
        </div>
        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="HotelBooking" class="container" OnValidSubmit="HandleCheckout">
                <div class="row px-2 text-success border-bottom">
                    <div class="col-7 py-1">
                        <p style="font-size:x-large;margin:0px;">Enter details</p>
                    </div>
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Name</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Name" type="text" class="form-control" />
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Phone</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Phone" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Email</label>
                    <InputText @bind-Value="HotelBooking.OrderDetails.Email" type="text" class="form-control" />
                </div>
                 <div class="form-group">
                    <label class="text-warning">Check in Date</label>
                    <InputDate @bind-Value="CheckInDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Check out Date</label>
                    <InputDate @bind-Value="CheckOutDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Number of nights</label>
                    <select class="form-control" @bind="@NumberOfNights">
                        @for (var i=1;i<=10;i++)
                        {
                                <option value="@i">@i</option>
                            }
                    </select>
                </div>
              
                <div class="form-group">
                    @if(HotelBooking.OrderDetails.HotelRoomDto.IsBooked)
                        {
                            <input class="btn btn-secondary form-control" value="Sold Out" />
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                        }
                </div>
            </EditForm>

        </div>

    </div>
</div>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    public HotelRoomBookingVM HotelBooking { get; set; } = new HotelRoomBookingVM();
    private int _NumbarOfNights = 1;
    private DateTime CheckInDate
    {
        get
        {
            return HotelBooking.OrderDetails.CheckInDate;
        }
        set
        {
            HotelBooking.OrderDetails.CheckInDate = value;
            HandleStartDateChange();
        }
    }
    private DateTime CheckOutDate
    {
        get
        {
            return HotelBooking.OrderDetails.CheckOutDate;
        }
        set
        {
            HotelBooking.OrderDetails.CheckOutDate = value;
            HandleEndDateChange();
        }
    }

    private int NumberOfNights {
        get
        {
            return _NumbarOfNights;
        } 
        set
        {
            _NumbarOfNights = value;
            HandleNbOfNightsChange();
        } 
    } 
    protected override async Task OnInitializedAsync()
    {
        try
        {
            HotelBooking.OrderDetails = new RoomOrderDetailsDto();
            if(Id != null)
            {
                if(await localStorage.GetItemAsync<HomeViewModel>(SD.Local_InitialBooking) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<HomeViewModel>(SD.Local_InitialBooking);
                    HotelBooking.OrderDetails.HotelRoomDto = await hotelService.GetHotelRoomDetails(
                    Id.Value,roomInitialInfo.StartDate.ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture),
                    roomInitialInfo.EndDate.ToString("dd/MM/yyyy",System.Globalization.CultureInfo.InvariantCulture));
                    NumberOfNights = roomInitialInfo.NumberOfNights;
                    HotelBooking.OrderDetails.CheckInDate = roomInitialInfo.StartDate;
                    HotelBooking.OrderDetails.CheckOutDate = roomInitialInfo.EndDate;
                    HotelBooking.OrderDetails.HotelRoomDto.TotalDays = roomInitialInfo.NumberOfNights;
                    HotelBooking.OrderDetails.HotelRoomDto.TotalAmount =
                    roomInitialInfo.NumberOfNights * HotelBooking.OrderDetails.HotelRoomDto.RegularRate;
                }
                else
                {
                    HotelBooking.OrderDetails.HotelRoomDto = await hotelService.GetHotelRoomDetails(
                    Id.Value, DateTime.Now.ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture),
                    DateTime.Now.AddDays(1).ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture));
                    NumberOfNights = 1;
                    HotelBooking.OrderDetails.CheckInDate = DateTime.Now;
                    HotelBooking.OrderDetails.CheckOutDate = DateTime.Now.AddDays(1);
                    HotelBooking.OrderDetails.HotelRoomDto.TotalDays = 1;
                    HotelBooking.OrderDetails.HotelRoomDto.TotalAmount =
                    HotelBooking.OrderDetails.HotelRoomDto.RegularRate;
                }
            }
        }
        catch(Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task HandleStartDateChange()
    {
         HotelBooking.OrderDetails.CheckOutDate = HotelBooking.OrderDetails.CheckInDate.AddDays(NumberOfNights);
    }

    private async Task HandleEndDateChange()
    {
         HotelBooking.OrderDetails.CheckInDate = HotelBooking.OrderDetails.CheckOutDate.AddDays(-NumberOfNights);
    }

    private async Task HandleNbOfNightsChange()
    {
        HotelBooking.OrderDetails.CheckOutDate = HotelBooking.OrderDetails.CheckInDate.AddDays(NumberOfNights);
        HotelBooking.OrderDetails.HotelRoomDto.TotalDays = NumberOfNights;
        HotelBooking.OrderDetails.HotelRoomDto.TotalAmount = NumberOfNights * HotelBooking.OrderDetails.HotelRoomDto.RegularRate;
    }

    private async Task HandleCheckout()
    {
        if(!await HandleValidation())
        {
            return;
        }
        try
        {
            var paymentDto = new StripePaymentDto()
                {
                    Amount = Convert.ToInt32(HotelBooking.OrderDetails.HotelRoomDto.TotalAmount * 100),
                    ProductName = HotelBooking.OrderDetails.HotelRoomDto.Name,
                    ReturnUrl = "/hotel/room-details/" + Id
                };
            var result = await stripePayment.CheckOut(paymentDto);
            HotelBooking.OrderDetails.StripeSeccionId = result.Data.ToString();
            HotelBooking.OrderDetails.RoomId = HotelBooking.OrderDetails.HotelRoomDto.Id;
            HotelBooking.OrderDetails.TotalCost = HotelBooking.OrderDetails.HotelRoomDto.TotalAmount;

            var roomOrderDetailsSaved = await roomOrderService.SaveRoomOrderDetails(HotelBooking.OrderDetails);
            await localStorage.SetItemAsync(SD.Local_RoomOrderDetails, roomOrderDetailsSaved);
            await jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch(Exception ex)
        {
            await jsRuntime.ToastrError(ex.Message);
        }

    }
    private async Task<bool> HandleValidation()
    {
        if(string.IsNullOrEmpty(HotelBooking.OrderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if(string.IsNullOrEmpty(HotelBooking.OrderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }
        if(string.IsNullOrEmpty(HotelBooking.OrderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}
