@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
 
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card-body">
            <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="HotelRoomModel.Name" class="font-control"></InputText>
                    <ValidationMessage For="() =>HotelRoomModel.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Occupancy</label>
                    <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="font-control"></InputNumber>
                    <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Rate</label>
                    <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="font-control"></InputNumber>
                    <ValidationMessage For="() =>HotelRoomModel.RegularRate"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Sq ft</label>
                    <InputText @bind-Value="HotelRoomModel.SqFt" class="font-control"></InputText>
                </div>
                <div class="form-group" style="height:250px;">
                    <label>Details</label>
                    @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="font-control"></InputTextArea>*@
                    <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            <h4>This Toolbar works with HTML</h4>
                            <a href="http://BlazorHelpWebsite.com">
                                BlazorHelpWebsite.com
                            </a>
                        </EditorContent>
                    </BlazoredTextEditor>
                    
                    }
                </div>
                <div class="form-group" style="70px">
                    <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    <div class="row">
                        @if(IsImageUploadProcessStarted)
                        {
                            <div class="col-md-12">
                                <span>
                                    <i class="fa fa-spin fa-spinner"></i>
                                    Please wait... Images are uploading...
                                </span>
                            </div>
                        }
                        @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="room-image" style="background:url('@roomImage');">
                                        <span class="room-image-title">
                                            @serial
                                        </span>
                                    </div>
                                    <button type="button" @onclick="()=>DeletePhoto(roomImage)"class="btn btn-outline-danger btn-block m-4">Delete</button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary">@Title Room </button>
                    <NavLink href="hotel-room" class="btn btn-secondary">Back To Index</NavLink>
                </div>
            </EditForm>
        </div>
    </div>

</div>
@code {

    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    private bool IsImageUploadProcessStarted { get; set; } = false;


    protected override async Task OnInitializedAsync() // for updating the hotel room
    {
        if (Id != null)
        {
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDto();
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;

        }
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }


    private async Task HandleHotelRoomUpsert()
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                await JsRuntime.InvokeVoidAsync("ShowSweetAlert", "error", "Task failed!");
                //await swat{

                //}
                //I need to call it here
                ////await HiddenVilla_Server.Pages.LearnBlazor.BlazorJs.
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                //update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()
                    || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"RoomImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await HotelImageRepository.DeleteHotelRoomImageByImageUrl(deletedImageName);
                        }
                    }
                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.InvokeVoidAsync("ShowSweetAlert", "success", "Task completed successfully!");
            }
            else
            {
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                //create
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastrSuccess("Hotel room create successfully.");
            }
            IsImageUploadProcessStarted = false;
        }
        catch(Exception ex)
        {

        }

        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() ==".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }

                else
                {
                    await JsRuntime.ToastrError("Image uploading failed.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }


    }
    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImageRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }
    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch(Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }
}
