@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
 
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card-body">
            <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="HotelRoomModel.Name" class="font-control"></InputText>
                    <ValidationMessage For="() =>HotelRoomModel.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Occupancy</label>
                    <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="font-control"></InputNumber>
                    <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Rate</label>
                    <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="font-control"></InputNumber>
                    <ValidationMessage For="() =>HotelRoomModel.RegularRate"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Sq ft</label>
                    <InputText @bind-Value="HotelRoomModel.SqFt" class="font-control"></InputText>
                </div>
                <div class="form-group">
                    <label>Details</label>
                    <InputTextArea @bind-Value="HotelRoomModel.Details" class="font-control"></InputTextArea>
                </div>
                <div class="form-group">
                    <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    <div class="row">
                        @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="room-image" style="background:url('@roomImage');">
                                        <span class="room-image-title">
                                            @serial
                                        </span>
                                    </div>
                                    <button type="button" class="btn btn-outline-danger btn-block m-4">Delete</button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary">@Title Room </button>
                    <NavLink href="hotel-room" class="btn btn-secondary">Back To Index</NavLink>
                </div>
            </EditForm>
        </div>
    </div>

</div>
@code {

        [Parameter]
        public int? Id { get; set; }
    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();

    protected override async Task OnInitializedAsync() // for updating the hotel room
    {
        if (Id != null)
        {
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            HotelRoomModel = new HotelRoomDto();
        }

    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                await JsRuntime.InvokeVoidAsync("ShowSweetAlert", "error", "Task failed!");
                //await swat{

                //}
                //I need to call it here
                ////await HiddenVilla_Server.Pages.LearnBlazor.BlazorJs.
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                {
                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.InvokeVoidAsync("ShowSweetAlert", "success", "Task completed successfully!");
            }
            else
            {
                //create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToastrSuccess("Hotel room create successfully.");
            }
        }
        catch(Exception ex)
        {

        }

        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() ==".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }

                else
                {
                    await JsRuntime.ToastrError("Image uploading failed.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }


    }
    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageUrl
                };
                await HotelImageRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }
}
